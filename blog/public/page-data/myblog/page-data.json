{"componentChunkName":"component---src-templates-blog-post-js","path":"/myblog/","result":{"data":{"site":{"siteMetadata":{"title":"Inquisitiveness"}},"markdownRemark":{"id":"0ccd24c9-c3f3-50f7-93f6-843f6417affc","excerpt":"ブログを新しくしました。素晴らしくナウい構成だと思います。 ひたすら試行錯誤して慣れない環境でデプロイすることができました。 ブログを新しくした経緯については後で熱く語ります！ 構成 Gatsby.js (React Static Site Generator) Github Actions (Build…","html":"<p>ブログを新しくしました。素晴らしくナウい構成だと思います。<br>\nひたすら試行錯誤して慣れない環境でデプロイすることができました。<br>\nブログを新しくした経緯については後で熱く語ります！</p>\n<h2>構成</h2>\n<ul>\n<li>Gatsby.js (React Static Site Generator)</li>\n<li>Github Actions (Build &#x26; Deploy)</li>\n<li>Mixhost (Hosting Server)</li>\n</ul>\n<h3>Gatsby.js</h3>\n<p>Gatsby(ギャッツビー)？なにそれ？Man○om？って人用にざっくり説明すると、</p>\n<blockquote>\n<p>Reactというフレームワークで作られている<br>\nNode.js パッケージが色々使える<br>\n静的サイトジェネレータ<br>\n表示が爆速</p>\n</blockquote>\n<p>という特徴があります。</p>\n<p>以前はWordPressというPHPで作られたソフトウェアを利用しており、動的なブログだったため動作がモッサリしていましたが、今回は爆速です。</p>\n<h3>Github Actions</h3>\n<p>ビルド及びデプロイをGithub Actionsに統合しました。</p>\n<p>ActionsのWorkflowは以下のような手順で行っています。</p>\n<ol>\n<li>Node.jsのセットアップ</li>\n<li>Gatsbyのビルド</li>\n<li>生成物(Artifact)のアップロード(一時保存)</li>\n<li>Artifactのダウンロード</li>\n<li>デプロイ先のサーバSSH Keyのインストール</li>\n<li>rsyncにてデプロイ</li>\n</ol>\n<p>これにより、Githubにpushすれば自動的にビルドしてデプロイを行ってくれます。非常に便利。</p>\n<h2>ハマったところ</h2>\n<p>Gatsby自体は以前利用した経験があったため詰まることはなかったですが、Github Actionsは初めての利用だったためかなり詰まりました。</p>\n<p>どのくらい詰まったかは、<a href=\"https://github.com/psbss/yuu-blog/commits/develop\">コミットログ</a>を見ていただければ分かるかと。</p>\n<p>中でも手順6のrsyncにてデプロイを行う部分はかなり手こずりました。<br>\nrsync自体は非常に簡単で、</p>\n<div class=\"gatsby-code-title\">bash</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">rsync</span> <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> 同期元ディレクトリ/ 同期先ディレクトリ/</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>と書けばいい感じに動いてくれます。これが、SSHを利用したrsyncになると、同期先サーバとディレクトリを指定します。ソースコードは以下の感じになります。</p>\n<div class=\"gatsby-code-title\">bash</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">rsync</span> <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> 同期元ディレクトリ/ ユーザ名@ホストアドレス:同期先ディレクトリ/</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Github Actionsの場合は環境変数のようなsecretsという機能を利用することができるので、以下のように書き直せます。</p>\n<div class=\"gatsby-code-title\">bash</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> 同期元ディレクトリ/ <span class=\"token variable\">${{secrets.REMOTE_USER}</span><span class=\"token punctuation\">}</span>@<span class=\"token variable\">${{secrets.REMOTE_HOST}</span><span class=\"token punctuation\">}</span>:同期先ディレクトリ</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>このとき、REMOTE_HOST側のsecretsがうまく動かない場合があるので、そのときは直書する。</p>","frontmatter":{"title":"Github actions+Gatsby.jsで最高のブログ環境を構築する","date":"2020-03-22","description":"試行錯誤","pagepath":"https://blog.ue-y.me/myblog/thumbnail.png"}}},"pageContext":{"slug":"/myblog/","previous":{"fields":{"slug":"/kindai-summit-2019/"},"frontmatter":{"title":"近大サミット2019に参加してきた。挑戦し続ける大学が提案する新しい教育"}},"next":{"fields":{"slug":"/gatsby-sns/"},"frontmatter":{"title":"React-Shareを利用してGatsby.jsにSNS共有ボタンを作る"}}}}}